/* gpmpn_tdiv_qr -- Divide the numerator (np,nn) by the denominator (dp,dn) and
   write the nn-dn+1 quotient limbs at qp and the dn remainder limbs at rp.  If
   qxn is non-zero, generate that many fraction limbs and append them after the
   other quotient limbs, and update the remainder accordingly.  The input
   operands are unaffected.

   Preconditions:
   1. The most significant limb of the divisor must be non-zero.
   2. nn >= dn, even if qxn is non-zero.  (??? relax this ???)

   The time complexity of this is O(qn*qn+M(dn,qn)), where M(m,n) is the time
   complexity of multiplication.

Copyright 1997, 2000-2002, 2005, 2009, 2015 Free Software Foundation, Inc.

This file is part of the GNU MP Library.

The GNU MP Library is free software; you can redistribute it and/or modify
it under the terms of either:

  * the GNU Lesser General Public License as published by the Free
	Software Foundation; either version 3 of the License, or (at your
	option) any later version.

or

  * the GNU General Public License as published by the Free Software
	Foundation; either version 2 of the License, or (at your option) any
	later version.

or both in parallel, as here.

The GNU MP Library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received copies of the GNU General Public License and the
GNU Lesser General Public License along with the GNU MP Library.  If not,
see https://www.gnu.org/licenses/.  */

#include "GPGMP/gpgmp-impl.cuh"
#include "GPGMP/longlong.cuh"

namespace gpgmp
{
	namespace mpnRoutines
	{

		ANYCALLER mp_size_t gpmpn_tdiv_qr_itch(mp_size_t numeratorNumLimbs, mp_size_t denominatorNumLimbs)
		{
			switch (denominatorNumLimbs)
			{
			case 1:
			{
				return 0;
			}
			case 2:
			{
				return numeratorNumLimbs + 1;
			}
			default:
			{
				mp_size_t totalScratchNeeded = 0;
				totalScratchNeeded += (denominatorNumLimbs + numeratorNumLimbs + 1);
				totalScratchNeeded += gpmpn_mu_div_qr_itch(numeratorNumLimbs, denominatorNumLimbs, 0);

				mp_size_t qn = numeratorNumLimbs - denominatorNumLimbs + 1;
				totalScratchNeeded += qn;
				totalScratchNeeded += (2 * qn + 1);

				totalScratchNeeded += gpmpn_mu_div_qr_itch(2 * qn, qn, 0);

				totalScratchNeeded += denominatorNumLimbs;

				//for the possible call to gpmpn_dcpi1_div_qr
				totalScratchNeeded += gpmpn_dcpi1_div_qr_itch(denominatorNumLimbs);

				return totalScratchNeeded;
			}
			}
		}

		#ifdef __CUDA_ARCH__
		__device__
		#endif
		//TODO: This is horrible practice, change this from a lookup table to a function that calculates the maximum itch ratio for a given numeratorNumLimbs
		const float numeratorToMaximumItchRatios[] = {0.000000, 1.500000, 1.500000, 13.333333, 12.000000, 11.200000, 10.500000, 10.142858, 10.000000, 9.777778, 9.500000, 9.272727, 9.166667, 9.000000, 8.857142, 8.800000, 8.687500, 8.588235, 8.555555, 8.473684, 8.450000, 8.380953, 8.318182, 8.391304, 8.333333, 8.280000, 8.269231, 8.222222, 8.178572, 8.172414, 8.133333, 8.096774, 8.093750, 8.060606, 8.029411, 8.057143, 8.000000, 8.027027, 7.973684, 8.000000, 7.925000, 7.975610, 7.904762, 7.953488, 7.886364, 7.933333, 7.869565, 7.914894, 7.854167, 7.877551, 7.820000, 7.862745, 7.807693, 7.849057, 7.796296, 7.818182, 7.767857, 7.807017, 7.758621, 7.796610, 7.750000, 7.770492, 7.725806, 7.761905, 7.718750, 7.753846, 7.712121, 7.731343, 7.691176, 7.724638, 7.685714, 7.718310, 7.680555, 7.698630, 7.662162, 7.693333, 7.657895, 7.688312, 7.653846, 7.670886, 7.637500, 7.666667, 7.634146, 7.662651, 7.630952, 7.647059, 7.616279, 7.643678, 7.613636, 7.696629, 7.666667, 7.681319, 7.652174, 7.666667, 7.638298, 7.673684, 7.645833, 7.659794, 7.632653, 7.646465, 7.620000, 7.653465, 7.627451, 7.640777, 7.615385, 7.628572, 7.603774, 7.635514, 7.611111, 7.623853, 7.600000, 7.612613, 7.589286, 7.619469, 7.596491, 7.608696, 7.586207, 7.598290, 7.576271, 7.605042, 7.583333, 7.595041, 7.573771, 7.585366, 7.564516, 7.592000, 7.571429, 7.582677, 7.562500, 7.573643, 7.553846, 7.580153, 7.560606, 7.571429, 7.552239, 7.562963, 7.544117, 7.569343, 7.550725, 7.561151, 7.542857, 7.553192, 7.535211, 7.559441, 7.541667, 7.551724, 7.534246, 7.557823, 7.540541, 7.550335, 7.533333, 7.556292, 7.539474, 7.535948, 7.519481, 7.554839, 7.538462, 7.535032, 7.518987, 7.553459, 7.537500, 7.534162, 7.518518, 7.552147, 7.536585, 7.521212, 7.506024, 7.550898, 7.535714, 7.520710, 7.505882, 7.549707, 7.534883, 7.520231, 7.505747, 7.548572, 7.534091, 7.519774, 7.505618, 7.603352, 7.588889, 7.569061, 7.554945, 7.590164, 7.576087, 7.562162, 7.548387, 7.577540, 7.563830, 7.550264, 7.536842, 7.586388, 7.572917, 7.554404, 7.541237, 7.574359, 7.561224, 7.548223, 7.535354, 7.562814, 7.550000, 7.537313, 7.524753, 7.571429, 7.558824, 7.541463, 7.529126, 7.560387, 7.548077, 7.535885, 7.523809, 7.549763, 7.537736, 7.525822, 7.514019, 7.558139, 7.546296, 7.529954, 7.518349, 7.547945, 7.536364, 7.524887, 7.513514, 7.538116, 7.526786, 7.515555, 7.504425, 7.546256, 7.535088, 7.519650, 7.508696, 7.536797, 7.525862, 7.515021, 7.504273, 7.527659, 7.516949, 7.506329, 7.495798, 7.535565, 7.525000, 7.510374, 7.500000, 7.526749, 7.516394, 7.506123, 7.495935, 7.518219, 7.508065, 7.497992, 7.488000, 7.525897, 7.515873, 7.501976, 7.492126, 7.517647, 7.507812, 7.498055, 7.488372, 7.509653, 7.500000, 7.490421, 7.480916, 7.517110, 7.507576, 7.494339, 7.484962, 7.509363, 7.500000, 7.490706, 7.481482, 7.501845, 7.492647, 7.483517, 7.474452, 7.509091, 7.500000, 7.487365, 7.478417, 7.501792, 7.492857, 7.483986, 7.475177, 7.494699, 7.485916, 7.477193, 7.468532, 7.501742, 7.493055, 7.484429, 7.475862, 7.494845, 7.486301, 7.477816, 7.469388, 7.501695, 7.493243, 7.484848, 7.476510, 7.494983, 7.486667, 7.475083, 7.466887, 7.501650, 7.493421, 7.485246, 7.477124, 7.482085, 7.474026, 7.466020, 7.458065, 7.501608, 7.493590, 7.485623, 7.477707, 7.482540, 7.474684, 7.466877, 7.459119, 7.501567, 7.493750, 7.485981, 7.478261, 7.482972, 7.475308, 7.464615, 7.457055, 7.501529, 7.493902, 7.486322, 7.478788, 7.471299, 7.463855, 7.456457, 7.449102, 7.501493, 7.494048, 7.486647, 7.479290, 7.471976, 7.464706, 7.457478, 7.450293, 7.501458, 7.494186, 7.486957, 7.479769, 7.472622, 7.465517, 7.458453, 7.451428, 7.501424, 7.494318, 7.487252, 7.480226, 7.473239, 7.466292, 7.459384, 7.452514, 7.501393, 7.494444, 7.484765, 7.477901, 7.471075, 7.461538, 7.454794, 7.448087, 7.490463, 7.483696, 7.476965, 7.470270, 7.463612, 7.456989, 7.450402, 7.443850, 7.490667, 7.484043, 7.477454, 7.470900, 7.464380, 7.457895, 7.451444, 7.445026, 7.490861, 7.484375, 7.475325, 7.468912, 7.462533, 7.453608, 7.447301, 7.441026, 7.480818, 7.474490, 7.468194, 7.461929, 7.455696, 7.449495, 7.443325, 7.437186, 7.481203, 7.475000, 7.468828, 7.462687, 7.456576, 7.450495, 7.444445, 7.438424, 7.481573, 7.475490, 7.466993, 7.460976, 7.454988, 7.446602, 7.440678, 7.434783, 7.472289, 7.466346, 7.460432, 7.454545, 7.448688, 7.442857, 7.437055, 7.431280, 7.472813, 7.466981, 7.461176, 7.455399, 7.449649, 7.443925, 7.438229, 7.432558, 7.473318, 7.467593, 7.459584, 7.453917, 7.448276, 7.440367, 7.434783, 7.429224, 7.464693, 7.459091, 7.453515, 7.447964, 7.442438, 7.436937, 7.431461, 7.426009, 7.465324, 7.459821, 7.454343, 7.448889, 7.443459, 7.438053, 7.432671, 7.427313, 7.465934, 7.460526, 7.452954, 7.447598, 7.442266, 7.434783, 7.429501, 7.424242, 7.457883, 7.452586, 7.447312, 7.442060, 7.436831, 7.431624, 7.426439, 7.421277, 7.458599, 7.453390, 7.448203, 7.443038, 7.437895, 7.432773, 7.427673, 7.422594, 7.459290, 7.454167, 7.446985, 7.441909, 7.436853, 7.429752, 7.424742, 7.419753, 7.451746, 7.446721, 7.441718, 7.436735, 7.431772, 7.426829, 7.421906, 7.417004, 7.452525, 7.447581, 7.442656, 7.437751, 7.432866, 7.428000, 7.423154, 7.418327, 7.453280, 7.448413, 7.441584, 7.436759, 7.431952, 7.425197, 7.420432, 7.415686, 7.446184, 7.441406, 7.436647, 7.431907, 7.427185, 7.422481, 7.417795, 7.413127, 7.447013, 7.442307, 7.437620, 7.432950, 7.428298, 7.423664, 7.419048, 7.414449, 7.447818, 7.443182, 7.436673, 7.432076, 7.427495, 7.421052, 7.416510, 7.411985, 7.441122, 7.436567, 7.432030, 7.427509, 7.423006, 7.418519, 7.414048, 7.409594, 7.441989, 7.437500, 7.433028, 7.428571, 7.424131, 7.419708, 7.415300, 7.410909, 7.442831, 7.438406, 7.432188, 7.427798, 7.423423, 7.417266, 7.412926, 7.408602, 7.436494, 7.432143, 7.427807, 7.423488, 7.419183, 7.414894, 7.410619, 7.406361, 7.437390, 7.433099, 7.428823, 7.424562, 7.420315, 7.416084, 7.411867, 7.407666, 7.438261, 7.434028, 7.428076, 7.423875, 7.419689, 7.413793, 7.409638, 7.405499, 7.432247, 7.428082, 7.423932, 7.419795, 7.415673, 7.411565, 7.407470, 7.403390, 7.433164, 7.429054, 7.424958, 7.420876, 7.416807, 7.899329, 7.894473, 7.887960, 7.921536, 7.916667, 7.910150, 7.910299, 7.905473, 7.899007, 7.899174, 7.894390, 7.887974, 7.888158, 7.883415, 7.877049, 7.909984, 7.905229, 7.898858, 7.899023, 7.894309, 7.887987, 7.888168, 7.883495, 7.877221, 7.896774, 7.892109, 7.885852, 7.918138, 7.913462, 7.907200, 7.907348, 7.902711, 7.896497, 7.896661, 7.892064, 7.885895, 7.886076, 7.881516, 7.875394, 7.907087, 7.902516, 7.896389, 7.896552, 7.892019, 7.885938, 7.886116, 7.881620, 7.875583, 7.894410, 7.889923, 7.883901, 7.914992, 7.910494, 7.904469, 7.904615, 7.900154, 7.894172, 7.894334, 7.889908, 7.883969, 7.884146, 7.879756, 7.873860, 7.904401, 7.900000, 7.894100, 7.894260, 7.889894, 7.884036, 7.884211, 7.879880, 7.874063, 7.892216, 7.887892, 7.882090, 7.912072, 7.907738, 7.901932, 7.902077, 7.897778, 7.892012, 7.892171, 7.887906, 7.882180, 7.882353, 7.878120, 7.872434, 7.901903, 7.897661, 7.891971, 7.892128, 7.887918, 7.882267, 7.882438, 7.878261, 7.872648, 7.890173, 7.886003, 7.880404, 7.909352, 7.905172, 7.899570, 7.899714, 7.895565, 7.890000, 7.890157, 7.886040, 7.880512, 7.880682, 7.876596, 7.871105, 7.899576, 7.895480, 7.889986, 7.890141, 7.886076, 7.880618, 7.880785, 7.876750, 7.871329, 7.888268, 7.884240, 7.878830, 7.906815, 7.902778, 7.897365, 7.897507, 7.893499, 7.888122, 7.888276, 7.884297, 7.878954, 7.879121, 7.875172, 7.869863, 7.897401, 7.893443, 7.888131, 7.888283, 7.884354, 7.879076, 7.879240, 7.875339, 7.870095, 7.886487, 7.882591, 7.877358, 7.904441, 7.900537, 7.895302, 7.895442, 7.891566, 7.886364, 7.886515, 7.882667, 7.877497, 7.877660, 7.873838, 7.868700, 7.895364, 7.891534, 7.886394, 7.886544, 7.882740, 7.877632, 7.877792, 7.874016, 7.868938, 7.884817, 7.881046, 7.875979, 7.902216, 7.898438, 7.893368, 7.893507, 7.889753, 7.884715, 7.884864, 7.881137, 7.876129, 7.876289, 7.872587, 7.867609, 7.893453, 7.889744, 7.884763, 7.884911, 7.881226, 7.876276, 7.876433, 7.872774, 7.867853, 7.883249, 7.879594, 7.874683, 7.900126, 7.896465, 7.891551, 7.891688, 7.888050, 7.883166, 7.883312, 7.879699, 7.874844, 7.875000, 7.871411, 7.866583, 7.891656, 7.888060, 7.883230, 7.883375, 7.879802, 7.875000, 7.875154, 7.871605, 7.866831, 7.881773, 7.878229, 7.873465, 7.898160, 7.894608, 7.889841, 7.889976, 7.886447, 7.881707, 7.881851, 7.878345, 7.873633, 7.873786, 7.870303, 7.865617, 7.889964, 7.886474, 7.881785, 7.881927, 7.878459, 7.873798, 7.873950, 7.870503, 7.865868, 7.880383, 7.876942, 7.872315, 7.896305, 7.892857, 7.888228, 7.888361, 7.884935, 7.880332, 7.880473, 7.877069, 7.872491, 7.872642, 7.869258, 7.864706, 7.888367, 7.884976, 7.880422, 7.880562, 7.877193, 7.872663, 7.872812, 7.869464, 7.864959, 7.879070, 7.875726, 7.871230, 7.894554, 7.891204, 7.886705, 7.886836, 7.883506, 7.879032, 7.879171, 7.875862, 7.871412, 7.871560, 7.868270, 7.863844, 7.886857, 7.883562, 7.879133, 7.879271, 7.875996, 7.871591, 7.871737, 7.868481, 7.864100, 7.877828, 7.874576, 7.870203, 7.892898, 7.889640, 7.885264, 7.885393, 7.882155, 7.877803, 7.877940, 7.874721, 7.870391, 7.892857, 7.889632, 7.885301, 7.885428, 7.882222, 7.877913, 7.878049, 7.874862, 7.870575, 7.870718, 7.867550, 7.863286, 7.876652, 7.873487, 7.869231, 7.957190, 7.953948, 7.949616, 7.949672, 7.946448, 7.942140, 7.942203, 7.938998, 7.934711, 7.934783, 7.931596, 7.927332, 7.927411, 7.924242, 7.920000, 7.920086, 7.916936, 7.912715, 7.912809, 7.909678, 7.905478, 7.918455, 7.915327, 7.911135, 7.911230, 7.908120, 7.903949, 7.904051, 7.900959, 7.896809, 7.896918, 7.893843, 7.889714, 7.889831, 7.886773, 7.882664, 7.882788, 7.879747, 7.875659, 7.875790, 7.872766, 7.868698, 7.868835, 7.865828, 7.861780, 7.874477, 7.871473, 7.867432, 7.950991, 7.947917, 7.943809, 7.943867, 7.940810, 7.936722, 7.936788, 7.933747, 7.929679, 7.929752, 7.926729, 7.922680, 7.922760, 7.919753, 7.915725, 7.915811, 7.912820, 7.908812, 7.908905, 7.905931, 7.901941, 7.914286, 7.911315, 7.907332, 7.907426, 7.904471, 7.900507, 7.900609, 7.897670, 7.893725, 7.893832, 7.890909, 7.886983, 7.887097, 7.884189, 7.880282, 7.880402, 7.877510, 7.873621, 7.873747, 7.870871, 7.867000, 7.867133, 7.864272, 7.860419, 7.872510, 7.869652, 7.865805, 7.945382, 7.942461, 7.938553, 7.938614, 7.935707, 7.931818, 7.931886, 7.928994, 7.925123, 7.925197, 7.922320, 7.918468, 7.918548, 7.915686, 7.911851, 7.911937, 7.909091, 7.905273, 7.905366, 7.902534, 7.898734, 7.910506, 7.907677, 7.903883, 7.903977, 7.901163, 7.897386, 7.897485, 7.894686, 7.890927, 7.891032, 7.888247, 7.884504, 7.884615, 7.881845, 7.878119, 7.878236, 7.875479, 7.871770, 7.871893, 7.869150, 7.865458, 7.865586, 7.862857, 7.859182, 7.870722, 7.867996, 7.864326, 7.940284, 7.937500, 7.933775, 7.933837, 7.931067, 7.927359, 7.927427, 7.924670, 7.920979, 7.921052, 7.918310, 7.914634, 7.914714, 7.911985, 7.908326, 7.908411, 7.905695, 7.902052, 7.902143, 7.899441, 7.895814, 7.907063, 7.904364, 7.900742, 7.900834, 7.898148, 7.894542, 7.894639, 7.891967, 7.888376, 7.888479, 7.885819, 7.882245, 7.882353, 7.879706, 7.876147, 7.876260, 7.873626, 7.870082, 7.870201, 7.867580, 7.864051, 7.864175, 7.861567, 7.858053, 7.869091, 7.866485, 7.862977, 7.935630, 7.932971, 7.929412, 7.929476, 7.926829, 7.923285, 7.923354, 7.920721, 7.917192, 7.917266, 7.914645, 7.911131, 7.911211, 7.908602, 7.905103, 7.905188, 7.902592, 7.899107, 7.899197, 7.896613, 7.893143, 7.903914, 7.901333, 7.897869, 7.897959, 7.895390, 7.891940, 7.892035, 7.889478, 7.886043, 7.886143, 7.883598, 7.880176, 7.880282, 7.877748, 7.874341, 7.874451, 7.871930, 7.868536, 7.868651, 7.866142, 7.862762, 7.862882, 7.860384, 7.857018, 7.867596, 7.865100, 7.861739, 7.931364, 7.928820, 7.925412, 7.925477, 7.922944, 7.919550, 7.919620, 7.917099, 7.913719, 7.913793, 7.911283, 7.907917, 7.907997, 7.905499, 7.902146, 7.902230, 7.899743, 7.896404, 7.896493, 7.894017, 7.890692, 7.901024, 7.898551, 7.895230, 7.895319, 7.892857, 7.889550, 7.889644, 7.887193, 7.883898, 7.883996, 7.881557, 7.878275, 7.878378, 7.875949, 7.872681, 7.872788, 7.870370, 7.867115, 7.867227, 7.864820, 7.861577, 7.861693, 7.859296, 7.856067, 7.933110, 7.930660, 7.927379, 7.927440, 7.925000, 7.921732, 7.921797, 7.919368, 7.916113, 7.916183, 7.913764, 7.910522, 7.910596, 7.908189, 7.904959, 7.905037, 7.902640, 7.899423, 7.899506, 7.897120, 7.893915, 7.894001, 7.891625, 7.888433, 7.898361, 7.895987, 7.892799, 7.892886, 7.890523, 7.887347, 7.887439, 7.885086, 7.881922, 7.882018, 7.879675, 7.876523, 7.876623, 7.874290, 7.871150, 7.871255, 7.868932, 7.865804, 7.865913, 7.863600, 7.860484, 7.860596, 7.858293, 7.855189, 7.864952, 7.862650, 7.859550, 7.987971, 7.985577, 7.982386, 7.982400, 7.980016, 7.976837, 7.976856, 7.974482, 7.971315, 7.971338, 7.968974, 7.965819, 7.965846, 7.963492, 7.960349, 7.960381, 7.958036, 7.954905, 7.954941, 7.952607, 7.949487, 7.958991, 7.956659, 7.953543, 7.953580, 7.951258, 7.948154, 7.948195, 7.945882, 7.942790, 7.942835, 7.940532, 7.937451, 7.937500, 7.935207, 7.932137, 7.932190, 7.929906, 7.926848, 7.926905, 7.924631, 7.921584, 7.921645, 7.919380, 7.916344, 7.925696, 7.923434, 7.920402, 7.920463, 7.918210, 7.915189, 7.915254, 7.913010, 7.910000, 7.910069, 7.907834, 7.904835, 7.904908, 7.902682, 7.899693, 7.899770, 7.897553, 7.894576, 7.894657, 7.892448, 7.889482, 7.889566, 7.887367, 7.884411, 7.893617, 7.891420, 7.888467, 7.888552, 7.886364, 7.883421, 7.883510, 7.881330, 7.878399, 7.878490, 7.876320, 7.873399, 7.873494, 7.871332, 7.868421, 7.868520, 7.866366, 7.863466, 7.863568, 7.861423, 7.858533, 7.858639, 7.856502, 7.853622, 7.862687, 7.860552, 7.857675, 7.976917, 7.974702, 7.971747, 7.971768, 7.969562, 7.966617, 7.966642, 7.964445, 7.961510, 7.961538, 7.959350, 7.956425, 7.956458, 7.954278, 7.951363, 7.951399, 7.949227, 7.946323, 7.946363, 7.944200, 7.941306, 7.950147, 7.947985, 7.945095, 7.945135, 7.942983, 7.940102, 7.940146, 7.938002, 7.935131, 7.935178, 7.933042, 7.930182, 7.930233, 7.928104, 7.925254, 7.925308, 7.923188, 7.920348, 7.920405, 7.918293, 7.915462, 7.915524, 7.913420, 7.910598, 7.919308, 7.917207, 7.914389, 7.914450, 7.912356, 7.909548, 7.909613, 7.907527, 7.904728, 7.904796, 7.902718, 7.899929, 7.900000, 7.897930, 7.895150, 7.895225, 7.893162, 7.890391, 7.890470, 7.888415, 7.885653, 7.885735, 7.883688, 7.880936, 7.889518, 7.887474, 7.884724, 7.884806, 7.882768, 7.880028, 7.880113, 7.878083, 7.875352, 7.875440, 7.873418, 7.870696, 7.870787, 7.868772, 7.866059, 7.866153, 7.864146, 7.861442, 7.861538, 7.859539, 7.856843, 7.856944, 7.854951, 7.852265, 7.860724, 7.858734, 7.856050, 7.967339, 7.965278, 7.962526, 7.962552, 7.960499, 7.957756, 7.957786, 7.955740, 7.953006, 7.953039, 7.951001, 7.948276, 7.948311, 7.946281, 7.943565, 7.943604, 7.941581, 7.938874, 7.938916, 7.936900, 7.934202, 7.942466, 7.940452, 7.937757, 7.937799, 7.935792, 7.933106, 7.933151, 7.931152, 7.928474, 7.928523, 7.926531, 7.923862, 7.923913, 7.921928, 7.919267, 7.919322, 7.917344, 7.914692, 7.914750, 7.912779, 7.910135, 7.910196, 7.908232, 7.905597, 7.913747, 7.911785, 7.909152, 7.909213, 7.907258, 7.904634, 7.904698, 7.902750, 7.900134, 7.900201, 7.898260, 7.895652, 7.895722, 7.893787, 7.891188, 7.891261, 7.889333, 7.886742, 7.886817, 7.884897, 7.882314, 7.882392, 7.880478, 7.877903, 7.885942, 7.884029, 7.881457, 7.881536, 7.879630, 7.877066, 7.877147, 7.875247, 7.872691, 7.872775, 7.870883, 7.868334, 7.868421, 7.866535, 7.863995, 7.864084, 7.862205, 7.859672, 7.859764, 7.857891, 7.855367, 7.855461, 7.853595, 7.851078, 7.859008, 7.857143, 7.854629, 7.958958, 7.957031, 7.954457, 7.954486, 7.952567, 7.950000, 7.950032, 7.948119, 7.945560, 7.945596, 7.943689, 7.941138, 7.941176, 7.939277, 7.936733, 7.936774, 7.934881, 7.932345, 7.932389, 7.930502, 7.927974, 7.935733, 7.933847, 7.931322, 7.931366, 7.929487, 7.926970, 7.927017, 7.925144, 7.922634, 7.922684, 7.920817, 7.918315, 7.918367, 7.916507, 7.914013, 7.914067, 7.912214, 7.909727, 7.909784, 7.907937, 7.905457, 7.905517, 7.903676, 7.901203, 7.908861, 7.907021, 7.904551, 7.904612, 7.902778, 7.900315, 7.900378, 7.898551, 7.896096, 7.896161, 7.894340, 7.891892, 7.891960, 7.890144, 7.887704, 7.887774, 7.885965, 7.883532, 7.883605, 7.881801, 7.879375, 7.879450, 7.877653, 7.875234, 7.882793, 7.880997, 7.878580, 7.878656, 7.876866, 7.874456, 7.874534, 7.872750, 7.870347, 7.870428, 7.868649, 7.866254, 7.866337, 7.864564, 7.862175, 7.862261, 7.860494, 7.858112, 7.858200, 7.856439, 7.854064, 7.854154, 7.852398, 7.850031, 7.857494, 7.855740, 7.853374, 7.951563, 7.949755, 7.947336, 7.947369, 7.945566, 7.943154, 7.943189, 7.941392, 7.938987, 7.939024, 7.937233, 7.934835, 7.934875, 7.933090, 7.930699, 7.930741, 7.928962, 7.926578, 7.926622, 7.924849, 7.922471, 7.929782, 7.928010, 7.925635, 7.925680, 7.923913, 7.921545, 7.921592, 7.919831, 7.917470, 7.917520, 7.915764, 7.913410, 7.913462, 7.911712, 7.909364, 7.909418, 7.907674, 7.905333, 7.905389, 7.903650, 7.901316, 7.901375, 7.899642, 7.897314, 7.904535, 7.902802, 7.900477, 7.900536, 7.898809, 7.896490, 7.896552, 7.894831, 7.892518, 7.892581, 7.890866, 7.888559, 7.888626, 7.886915, 7.884615, 7.884684, 7.882979, 7.880685, 7.880755, 7.879056, 7.876769, 7.876842, 7.875147, 7.872866, 7.880000, 7.878307, 7.876028, 7.876101, 7.874413, 7.872141, 7.872216, 7.870533, 7.868267, 7.868344, 7.866667, 7.864407, 7.864486, 7.862814, 7.860560, 7.860641, 7.858974, 7.856727, 7.856810, 7.855148, 7.852907, 7.852993, 7.851336, 7.849101, 7.856149, 7.854493, 7.852260, 7.944991, 7.943287, 7.941006, 7.941041, 7.939342, 7.937067, 7.937103, 7.935410, 7.933141, 7.933180, 7.931491, 7.929229, 7.929270, 7.927586, 7.925330, 7.925373, 7.923695, 7.921445, 7.921490, 7.919816, 7.917573, 7.924485, 7.922813, 7.920571, 7.920617, 7.918950, 7.916714, 7.916762, 7.915100, 7.912870, 7.912920, 7.911263, 7.909039, 7.909091, 7.907439, 7.905221, 7.905275, 7.903628, 7.901416, 7.901472, 7.899830, 7.897624, 7.897682, 7.896045, 7.893845, 7.900677, 7.899041, 7.896843, 7.896902, 7.895270, 7.893078, 7.893138, 7.891512, 7.889326, 7.889388, 7.887766, 7.885586, 7.885650, 7.884034, 7.881859, 7.881925, 7.880313, 7.878144, 7.884916, 7.883306, 7.881138, 7.881205, 7.879599, 7.877437, 7.877506, 7.875904, 7.873749, 7.873819, 7.872222, 7.870072, 7.870144, 7.868552, 7.866408, 7.866482, 7.864895, 7.862756, 7.862832, 7.861249, 7.859116, 7.859194, 7.857616, 7.855488, 7.855568, 7.853994, 7.851872, 7.851954, 7.850385, 7.848269, 7.874725, 7.873147, 7.871021, 7.958859, 7.957237, 7.955069, 7.955093, 7.953475, 7.951313, 7.951340, 7.949727, 7.947570, 7.947598, 7.945990, 7.943839, 7.943869, 7.942266, 7.940120, 7.940152, 7.938553, 7.936413, 7.936448, 7.934854, 7.932718, 7.932755, 7.931165, 7.929036, 7.929074, 7.927489, 7.925365, 7.925406, 7.923825, 7.921706, 7.921749, 7.920173, 7.918059, 7.918103, 7.916532, 7.914424, 7.914470, 7.912903, 7.910800, 7.910849, 7.909286, 7.907189, 7.907238, 7.905681, 7.903589, 7.903640, 7.902087, 7.900000, 7.900054, 7.898504, 7.896423, 7.896478, 7.894933, 7.892857, 7.892914, 7.891374, 7.889303, 7.889362, 7.887825, 7.885760, 7.885820, 7.884289, 7.882228, 7.882290, 7.880763, 7.878707, 7.878772, 7.877249, 7.875198, 7.875264, 7.873745, 7.871700, 7.871768, 7.870253, 7.868213, 7.868282, 7.866772, 7.864737, 7.864808, 7.863302, 7.861272, 7.861344, 7.859842, 7.857818, 7.857892, 7.856394, 7.854374, 7.854450, 7.852957, 7.850942, 7.851019, 7.849530, 7.847519, 7.872652, 7.871153, 7.869134, 7.952579, 7.951042, 7.948985, 7.949011, 7.947478, 7.945426, 7.945455, 7.943925, 7.941879, 7.941909, 7.940383, 7.938342, 7.938374, 7.936853, 7.934816, 7.934850, 7.933333, 7.931302, 7.931337, 7.929824, 7.927798, 7.927835, 7.926327, 7.924305, 7.924344, 7.922840, 7.920823, 7.920863, 7.919363, 7.917351, 7.917394, 7.915897, 7.913890, 7.913934, 7.912442, 7.910440, 7.910486, 7.908998, 7.907001, 7.907048, 7.905564, 7.903572, 7.903621, 7.902141, 7.900153, 7.900204, 7.898728, 7.896745, 7.896797, 7.895325, 7.893347, 7.893401, 7.891933, 7.889959, 7.890015, 7.888551, 7.886582, 7.886640, 7.885180, 7.883215, 7.883275, 7.881818, 7.879858, 7.879919, 7.878467, 7.876512, 7.876575, 7.875126, 7.873176, 7.873240, 7.871795, 7.869849, 7.869915, 7.868474, 7.866533, 7.866600, 7.865163, 7.863226, 7.863295, 7.861862, 7.859930, 7.860000, 7.858571, 7.856643, 7.856715, 7.855289, 7.853366, 7.853440, 7.852018, 7.850100, 7.850174, 7.848756, 7.846842, 7.870775, 7.869349, 7.867428, 7.946898, 7.945436, 7.943480, 7.943509, 7.942050, 7.940099, 7.940129, 7.938674, 7.936728, 7.936759, 7.935308, 7.933366, 7.933399, 7.931952, 7.930015, 7.930049, 7.928607, 7.926673, 7.926709, 7.925271, 7.923342, 7.923379, 7.921944, 7.920020, 7.920059, 7.918627, 7.916708, 7.916749, 7.915320, 7.913405, 7.913447, 7.912024, 7.910112, 7.910156, 7.908736, 7.906829, 7.906875, 7.905458, 7.903556, 7.903603, 7.902190, 7.900292, 7.900340, 7.898931, 7.897038, 7.897088, 7.895682, 7.893793, 7.893844, 7.892442, 7.890557, 7.890610, 7.889212, 7.887331, 7.887385, 7.885990, 7.884114, 7.884170, 7.882779, 7.880907, 7.880964, 7.879576, 7.877708, 7.877767, 7.876383, 7.874519, 7.874579, 7.873199, 7.871339, 7.871401, 7.870024, 7.868169, 7.868232, 7.866858, 7.865007, 7.865072, 7.863701, 7.861855, 7.861921, 7.860554, 7.858711, 7.858778, 7.857415, 7.855577, 7.855646, 7.854286, 7.852451, 7.852521, 7.851165, 7.849335, 7.849406, 7.848053, 7.846227, 7.869070, 7.867710, 7.865877, 7.941734, 7.940341, 7.938476, 7.938505, 7.937116, 7.935255, 7.935286, 7.933900, 7.932044, 7.932076, 7.930693, 7.928841, 7.928874, 7.927495, 7.925647, 7.925682, 7.924306, 7.922462, 7.922499, 7.921127, 7.919287, 7.919324, 7.917956, 7.916120, 7.916159, 7.914794, 7.912962, 7.913003, 7.911641, 7.909813, 7.909855, 7.908497, 7.906673, 7.906716, 7.905361, 7.903542, 7.903586, 7.902235, 7.900419, 7.900465, 7.899117, 7.897305, 7.897353, 7.896008, 7.894199, 7.894248, 7.892907, 7.891103, 7.891153, 7.889815, 7.888015, 7.888067, 7.886732, 7.884935, 7.884988, 7.883657, 7.881865, 7.881919, 7.880590, 7.878802, 7.878858, 7.877532, 7.875748, 7.875805, 7.874483, 7.872702, 7.872761, 7.871442, 7.869665, 7.869725, 7.868409, 7.866636, 7.866697, 7.865385, 7.863616, 7.863678, 7.862369, 7.860603, 7.860667, 7.859361, 7.857599, 7.857664, 7.856361, 7.854603, 7.854670, 7.853370, 7.851616, 7.851683, 7.850387, 7.848636, 7.848705, 7.847412, 7.845665, 7.867514, 7.866213, 7.864460, 7.937018, 7.935688, 7.933907, 7.933937, 7.932610, 7.930832, 7.930863, 7.929539, 7.927765, 7.927798, 7.926477, 7.924707, 7.924741, 7.923423, 7.921657, 7.921692, 7.920378, 7.918615, 7.918652, 7.917341, 7.915582, 7.915619, 7.914311, 7.912556, 7.912595, 7.911290, 7.909539, 7.909579, 7.908278, 7.906529, 7.906571, 7.905272, 7.903528, 7.903572, 7.902276, 7.900535, 7.900579, 7.899287, 7.897550, 7.897596, 7.896306, 7.894573, 7.894620, 7.893333, 7.891604, 7.891652, 7.890368, 7.888642, 7.888692, 7.887411, 7.885689, 7.885740, 7.884462, 7.882743, 7.882795, 7.881521, 7.879806, 7.879858, 7.878587, 7.876875, 7.876930, 7.875661, 7.873953, 7.874009, 7.872743, 7.871039, 7.871096, 7.869833, 7.868132, 7.868190, 7.866930, 7.865232, 7.865292, 7.864035, 7.862341, 7.862401, 7.861147, 7.859457, 7.859519, 7.858268, 7.856581, 7.856643, 7.855395, 7.853712, 7.853776, 7.852530, 7.850851, 7.850915, 7.849673, 7.847997, 7.848063, 7.846823, 7.845150, 7.866087, 7.864841, 7.863163, 7.932696, 7.931424, 7.929718, 7.929749, 7.928479, 7.926776, 7.926808, 7.925541, 7.923842, 7.923875, 7.922611, 7.920916, 7.920950, 7.919689, 7.917997, 7.918033, 7.916774, 7.915086, 7.915123, 7.913867, 7.912182, 7.912220, 7.910968, 7.909286, 7.909325, 7.908076, 7.906398, 7.906438, 7.905191, 7.903516, 7.903558, 7.902314, 7.900642, 7.900685, 7.899444, 7.897776, 7.897820, 7.896581, 7.894917, 7.894961, 7.893726, 7.892065, 7.892111, 7.890878, 7.889220, 7.889267, 7.888038, 7.886383, 7.886431, 7.885204, 7.883553, 7.883602, 7.882378, 7.880730, 7.880781, 7.879559, 7.877914, 7.877966, 7.876747, 7.875106, 7.875159, 7.873942, 7.872304, 7.872358, 7.871145, 7.869510, 7.869565, 7.868354, 7.866723, 7.866779, 7.865571, 7.863943, 7.864000, 7.862794, 7.861169, 7.861228, 7.860025, 7.858403, 7.858463, 7.857263, 7.855644, 7.855705, 7.854507, 7.852892, 7.852953, 7.851759, 7.850146, 7.870293, 7.869092, 7.867475, 7.867530, 7.866333, 7.864718, 7.931552, 7.930330, 7.928690, 7.928720, 7.927500, 7.925864, 7.925895, 7.924677, 7.923045, 7.923077, 7.921862, 7.920233, 7.920266, 7.919054, 7.917428, 7.917462, 7.916252, 7.914629, 7.914664, 7.913457, 7.911838, 7.911874, 7.910670, 7.909053, 7.909091, 7.907889, 7.906276, 7.906314, 7.905116, 7.903505, 7.903545, 7.902349, 7.900742, 7.900782, 7.899589, 7.897985, 7.898026, 7.896835, 7.895234, 7.895277, 7.894089, 7.892491, 7.892535, 7.891349, 7.889754, 7.889799, 7.888616, 7.887024, 7.887070, 7.885890, 7.884301, 7.884348, 7.883170, 7.881584, 7.881633, 7.880457, 7.878874, 7.878924, 7.877750, 7.876171, 7.876222, 7.875051, 7.873475, 7.873526, 7.872358, 7.870784, 7.870837, 7.869671, 7.868101, 7.868154, 7.866991, 7.865424, 7.865478, 7.864317, 7.862753, 7.862809, 7.861650, 7.860089, 7.860146, 7.858990, 7.857431, 7.857489, 7.856336, 7.854780, 7.854839, 7.853688, 7.852135, 7.852195, 7.851047, 7.849497, 7.849557, 7.848412, 7.846865, 7.846927, 7.845783, 7.844239, 7.882825, 7.881669, 7.880112, 8.008417};
		#ifdef __CUDA_ARCH__
		__device__
		#endif
		const mp_size_t maximumPrecalculatedNumeratorItchRatio = 2496;
		// TODO: This tdiv_qr_itch function uses pre-computed permutation analytics of the above tdiv_qr_itch algorithm, it is *much* larger than necessary in most cases.
		// The above lookup table ends at the maximum known output ratio of tdiv_qr_itch for a given numeratorNumLimbs, verified up to 125,000 limb permutations.
		ANYCALLER mp_size_t gpmpn_tdiv_qr_itch(mp_size_t maxNumberLimbsInEitherNumOrDenom)
		{
			if (maxNumberLimbsInEitherNumOrDenom <= (maximumPrecalculatedNumeratorItchRatio-1))
			{
				return static_cast<mp_size_t>(ceil(static_cast<double>(maxNumberLimbsInEitherNumOrDenom) * numeratorToMaximumItchRatios[maxNumberLimbsInEitherNumOrDenom]));
			}
			else
			{
				return static_cast<mp_size_t>(ceil(static_cast<double>(maxNumberLimbsInEitherNumOrDenom) * numeratorToMaximumItchRatios[maximumPrecalculatedNumeratorItchRatio-1]));
			}

		}

		ANYCALLER void perform_invert_pi1(gmp_pi1_t& dinv, mp_limb_t& d1, mp_limb_t& d0)
		{
			invert_pi1(dinv, d1, d0);
		}

		ANYCALLER void gpmpn_tdiv_qr(mp_ptr qp, mp_ptr rp, mp_size_t qxn, mp_srcptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t *scratchSpace)
		{
			ASSERT_ALWAYS(qxn == 0);

			ASSERT(nn >= 0);
			ASSERT(dn >= 0);
			ASSERT(dn == 0 || dp[dn - 1] != 0 && "The most significant limb of the divisor is not non-zero, it must be non-zero.");
			ASSERT(!MPN_OVERLAP_P(qp, nn - dn + 1 + qxn, np, nn));
			ASSERT(!MPN_OVERLAP_P(qp, nn - dn + 1 + qxn, dp, dn));

			if (dn == 0)
			{
				DIVIDE_BY_ZERO;
			}
			else if (dn == 1)
			{
				rp[0] = gpmpn_divrem_1(qp, (mp_size_t)0, np, nn, dp[0]);
				return;
			}
			else if (dn == 2)
			{
				mp_ptr n2p;
				mp_limb_t qhl, cy;
				if ((dp[1] & GMP_NUMB_HIGHBIT) == 0)
				{
					int cnt;
					mp_limb_t d2p[2];
					count_leading_zeros(cnt, dp[1]);
					cnt -= GMP_NAIL_BITS;
					d2p[1] = (dp[1] << cnt) | (dp[0] >> (GMP_NUMB_BITS - cnt));
					d2p[0] = (dp[0] << cnt) & GMP_NUMB_MASK;
					n2p = scratchSpace;
					cy = gpmpn_lshift(n2p, np, nn, cnt);
					n2p[nn] = cy;
					qhl = gpmpn_divrem_2(qp, 0L, n2p, nn + (cy != 0), d2p);
					if (cy == 0)
						qp[nn - 2] = qhl; /* always store nn-2+1 quotient limbs */
					rp[0] = (n2p[0] >> cnt) | ((n2p[1] << (GMP_NUMB_BITS - cnt)) & GMP_NUMB_MASK);
					rp[1] = (n2p[1] >> cnt);
				}
				else
				{
					n2p = scratchSpace;
					perform_MPN_COPY(n2p, np, nn);
					qhl = gpmpn_divrem_2(qp, 0L, n2p, nn, dp);
					qp[nn - 2] = qhl; /* always store nn-2+1 quotient limbs */
					rp[0] = n2p[0];
					rp[1] = n2p[1];
				}
				return;
			}
			else
			{
				int adjust;
				gmp_pi1_t dinv;
				adjust = np[nn - 1] >= dp[dn - 1]; /* conservative tests for quotient size */
				if (nn + adjust >= 2 * dn)
				{
					mp_ptr n2p, d2p;
					mp_limb_t cy;
					int cnt;

					qp[nn - dn] = 0;						  /* zero high quotient limb */
					if ((dp[dn - 1] & GMP_NUMB_HIGHBIT) == 0) /* normalize divisor */
					{
						count_leading_zeros(cnt, dp[dn - 1]);
						cnt -= GMP_NAIL_BITS;
						d2p = scratchSpace;
						scratchSpace += dn;
						gpmpn_lshift(d2p, dp, dn, cnt);
						n2p = scratchSpace;
						scratchSpace += (nn + 1);
						cy = gpmpn_lshift(n2p, np, nn, cnt);
						n2p[nn] = cy;
						nn += adjust;
					}
					else
					{
						cnt = 0;
						d2p = (mp_ptr)dp;
						n2p = scratchSpace;
						scratchSpace += (nn + 1);
						MPN_COPY(n2p, np, nn);
						n2p[nn] = 0;
						nn += adjust;
					}

					invert_pi1(dinv, d2p[dn - 1], d2p[dn - 2]);
					if (BELOW_THRESHOLD(dn, DC_DIV_QR_THRESHOLD))
					{
						gpmpn_sbpi1_div_qr(qp, n2p, nn, d2p, dn, dinv.inv32);
					}
					else if (BELOW_THRESHOLD(dn, MUPI_DIV_QR_THRESHOLD) ||					  /* fast condition */
							 BELOW_THRESHOLD(nn, 2 * MU_DIV_QR_THRESHOLD) ||				  /* fast condition */
							 (double)(2 * (MU_DIV_QR_THRESHOLD - MUPI_DIV_QR_THRESHOLD)) * dn /* slow... */
									 + (double)MUPI_DIV_QR_THRESHOLD * nn >
								 (double)dn * nn) /* ...condition */
					{
						mp_limb_t* dcpi1Scratch = scratchSpace;
						scratchSpace += gpmpn_dcpi1_div_qr_itch(dn);
						gpmpn_dcpi1_div_qr(qp, n2p, nn, d2p, dn, &dinv, dcpi1Scratch);
					}
					else
					{
						mp_size_t itch = gpmpn_mu_div_qr_itch(nn, dn, 0);
						mp_ptr scratch = scratchSpace;
						scratchSpace += itch;
						gpmpn_mu_div_qr(qp, rp, n2p, nn, d2p, dn, scratch);
						n2p = rp;
					}

					if (cnt != 0)
					{
						gpmpn_rshift(rp, n2p, dn, cnt);
					}
					else
					{
						perform_MPN_COPY(rp, n2p, dn);
					}
					return;
				}

				/* When we come here, the numerator/partial remainder is less
				   than twice the size of the denominator.  */

				{
					/* Problem:

					   Divide a numerator N with nn limbs by a denominator D with dn
					   limbs forming a quotient of qn=nn-dn+1 limbs.  When qn is small
					   compared to dn, conventional division algorithms perform poorly.
					   We want an algorithm that has an expected running time that is
					   dependent only on qn.

					   Algorithm (very informally stated):

					   1) Divide the 2 x qn most significant limbs from the numerator
					  by the qn most significant limbs from the denominator.  Call
					  the result qest.  This is either the correct quotient, but
					  might be 1 or 2 too large.  Compute the remainder from the
					  division.  (This step is implemented by an gpmpn_divrem call.)

					   2) Is the most significant limb from the remainder < p, where p
					  is the product of the most significant limb from the quotient
					  and the next(d)?  (Next(d) denotes the next ignored limb from
					  the denominator.)  If it is, decrement qest, and adjust the
					  remainder accordingly.

					   3) Is the remainder >= qest?  If it is, qest is the desired
					  quotient.  The algorithm terminates.

					   4) Subtract qest x next(d) from the remainder.  If there is
					  borrow out, decrement qest, and adjust the remainder
					  accordingly.

					   5) Skip one word from the denominator (i.e., let next(d) denote
					  the next less significant limb.  */

					mp_size_t qn;
					mp_ptr n2p, d2p;
					mp_ptr tp;
					mp_limb_t cy;
					mp_size_t in, rn;
					mp_limb_t quotient_too_large;
					unsigned int cnt;

					qn = nn - dn;
					qp[qn] = 0;	  /* zero high quotient limb */
					qn += adjust; /* qn cannot become bigger */

					if (qn == 0)
					{
						perform_MPN_COPY(rp, np, dn);
						return;
					}

					in = dn - qn; /* (at least partially) ignored # of limbs in ops */
					/* Normalize denominator by shifting it to the left such that its
					   most significant bit is set.  Then shift the numerator the same
					   amount, to mathematically preserve quotient.  */
					if ((dp[dn - 1] & GMP_NUMB_HIGHBIT) == 0)
					{
						count_leading_zeros(cnt, dp[dn - 1]);
						cnt -= GMP_NAIL_BITS;

						d2p = scratchSpace;
						scratchSpace += qn;
						gpmpn_lshift(d2p, dp + in, qn, cnt);
						d2p[0] |= dp[in - 1] >> (GMP_NUMB_BITS - cnt);

						n2p = scratchSpace;
						scratchSpace += (2 * qn + 1);
						cy = gpmpn_lshift(n2p, np + nn - 2 * qn, 2 * qn, cnt);
						if (adjust)
						{
							n2p[2 * qn] = cy;
							n2p++;
						}
						else
						{
							n2p[0] |= np[nn - 2 * qn - 1] >> (GMP_NUMB_BITS - cnt);
						}
					}
					else
					{
						cnt = 0;
						d2p = (mp_ptr)dp + in;

						n2p = scratchSpace;
						scratchSpace += (2 * qn + 1);
						perform_MPN_COPY(n2p, np + nn - 2 * qn, 2 * qn);
						if (adjust)
						{
							n2p[2 * qn] = 0;
							n2p++;
						}
					}

					/* Get an approximate quotient using the extracted operands.  */
					if (qn == 1)
					{
						mp_limb_t q0, r0;
						udiv_qrnnd(q0, r0, n2p[1], n2p[0] << GMP_NAIL_BITS, d2p[0] << GMP_NAIL_BITS);
						n2p[0] = r0 >> GMP_NAIL_BITS;
						qp[0] = q0;
					}
					else if (qn == 2)
					{
						gpmpn_divrem_2(qp, 0L, n2p, 4L, d2p); /* FIXME: obsolete function */
					}
					else
					{
						perform_invert_pi1(dinv, d2p[qn - 1], d2p[qn - 2]);
						if (BELOW_THRESHOLD(qn, DC_DIV_QR_THRESHOLD))
						{
							gpmpn_sbpi1_div_qr(qp, n2p, 2 * qn, d2p, qn, dinv.inv32);
						}
						else if (BELOW_THRESHOLD(qn, MU_DIV_QR_THRESHOLD))
						{
							mp_limb_t* dcpi1Scratch = scratchSpace;
							scratchSpace += gpmpn_dcpi1_div_qr_itch(qn);
							gpmpn_dcpi1_div_qr(qp, n2p, 2 * qn, d2p, qn, &dinv, dcpi1Scratch);
						}
						else
						{
							mp_size_t itch = gpmpn_mu_div_qr_itch(2 * qn, qn, 0);
							mp_ptr scratch = scratchSpace;
							scratchSpace += itch;
							mp_ptr r2p = rp;
							if (np == r2p) /* If N and R share space, put ... */
							{
								r2p += nn - qn; /* intermediate remainder at N's upper end. */
							}
							gpmpn_mu_div_qr(qp, r2p, n2p, 2 * qn, d2p, qn, scratch);
							perform_MPN_COPY(n2p, r2p, qn);
						}
					}

					rn = qn;
					/* Multiply the first ignored divisor limb by the most significant
					   quotient limb.  If that product is > the partial remainder's
					   most significant limb, we know the quotient is too large.  This
					   test quickly catches most cases where the quotient is too large;
					   it catches all cases where the quotient is 2 too large.  */
					{
						mp_limb_t dl, x;
						mp_limb_t h, dummy;

						if (in - 2 < 0)
							dl = 0;
						else
							dl = dp[in - 2];

						x = (dp[in - 1] << cnt) | ((dl >> 1) >> ((~cnt) % GMP_LIMB_BITS));
						umul_ppmm(h, dummy, x, qp[qn - 1] << GMP_NAIL_BITS);

						if (n2p[qn - 1] < h)
						{
							mp_limb_t cy;

							gpmpn_decr_u(qp, (mp_limb_t)1);
							cy = gpmpn_add_n(n2p, n2p, d2p, qn);
							if (cy)
							{
								/* The partial remainder is safely large.  */
								n2p[qn] = cy;
								++rn;
							}
						}
					}

					quotient_too_large = 0;
					if (cnt != 0)
					{
						mp_limb_t cy1, cy2;

						/* Append partially used numerator limb to partial remainder.  */
						cy1 = gpmpn_lshift(n2p, n2p, rn, GMP_NUMB_BITS - cnt);
						n2p[0] |= np[in - 1] & (GMP_NUMB_MASK >> cnt);

						/* Update partial remainder with partially used divisor limb.  */
						cy2 = gpmpn_submul_1(n2p, qp, qn, dp[in - 1] & (GMP_NUMB_MASK >> cnt));
						if (qn != rn)
						{
							ASSERT_ALWAYS(n2p[qn] >= cy2);
							n2p[qn] -= cy2;
						}
						else
						{
							n2p[qn] = cy1 - cy2; /* & GMP_NUMB_MASK; */

							quotient_too_large = (cy1 < cy2);
							++rn;
						}
						--in;
					}
					/* True: partial remainder now is neutral, i.e., it is not shifted up.  */

					tp = scratchSpace;
					scratchSpace += dn;

					if (in < qn)
					{
						if (in == 0)
						{
							perform_MPN_COPY(rp, n2p, rn);
							ASSERT_ALWAYS(rn == dn);
							goto foo;
						}
						gpmpn_mul(tp, qp, qn, dp, in);
					}
					else
					{
						gpmpn_mul(tp, dp, in, qp, qn);
					}

					cy = gpmpn_sub(n2p, n2p, rn, tp + in, qn);
					perform_MPN_COPY(rp + in, n2p, dn - in);
					quotient_too_large |= cy;
					cy = gpmpn_sub_n(rp, np, tp, in);
					cy = gpmpn_sub_1(rp + in, rp + in, rn, cy);
					quotient_too_large |= cy;
					foo:
						if (quotient_too_large)
						{
							gpmpn_decr_u(qp, (mp_limb_t)1);
							gpmpn_add_n(rp, rp, dp, dn);
						}
				}
				return;
			}
		}

	}
}